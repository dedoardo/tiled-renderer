Immediate:
 ☐ Fix the visual studio solution to output .obj files and write scripts to clean / prepare repos for upload

Next milestones:
 ☐ Fully support textures
 ☐ Postprocessing / HDR + Controllable environment
 ☐ Terrain
 ☐ Sample document where everything is documented, all the process from offline tools to render
 ☐ Quaterion
 ☐ CBuffer double buffering
 ☐ VSync

Features:
 ☐ String identification and character validation
 ☐ Hash messages and buffer them
 ☐ Compute light attenaution and maximum range, add those functions in the shader common
 ☐ GPUBackend::create_buffer implement different buffer types ( 644 )
 ☐ GPUBackend::create_surface cubemaps and texture arrays, need some work on offline tools aswell ( 859 )
 ☐ Camera more camera properties ( camera.hpp )
 ☐ Rework the space partioning ( keep the code, simply make the structures more or less OOP and with possibly less private / public data ), also implement a multithreaded non-culled approach
 ☐ (?) shall i keep using std::vector ? they are actually doing the job, but that's the only place where STL containers are used, might go for more consistency
 ☐ (?) shall I keep using plain structures for scene nodes ? might do a thing similar to the space partioning
 ☐ Implement a State for the layer Executed::Queueing::Ready or something like it
 ☐ Shall I have some kind of parameter validation macro and dont just randomly check parameters throughout the whole function
 ☐ More error output when intiializing renderer
 ☐ When including precompiled shader use some kind of namespace like shader_code::
 ☐ In visual studio options for shader compilation to header use $(Filename)
 ☐ Allocators should be a bit more friendly to use
 ☐ Fix some constants and provide functions for creating arguments for parametergroups
 ☐ math::upper_pow2 is incorrect :/ is wrong by one ? pls fix it
 ☐ Consistent naming
 ☐ Find a way to dump Shadervariable
 ☐ Wrap all execute() ifs to be only enabled on certain occasions
 ☐ Check assembly for set_parameter and make sure it dumps everything in one place and no calls simply jumping based on ofofset
 ☐ In the future i might be able to remove the common states and use an array and make it work with a look at table :/, to avoid all those ifs... we'll see. Currently a common_state swap implies a lot of possiblty non needed sets
 ☐ Rename all parameters with more adequate naems
 ☐ Give the user the ability to associate names to parameters, making debugging extremely easy
 ☐ PipelineParameter::data should be an enum just to simplify naming, and in passes.hpp give indices to the different m_parameters[XXX]
 ☐ Enable resource validation, save for each shader how many parameters need to be set, and check if all of them are actually being set 
 ☐ Find a way to buffer camy_messages, not to clutter the output, maybe using some kind of hashing 
 ☐ Fix how shaders are called as shader variables
Bugs:

Fixes:
 ☐ Move colors to float3 
 ☐ Dipose or unload or destroy just freaking choose one CONSISTENCY
 ☐ Use references when the object cannot be null, pointer otherwise
 ☐ Figure out exactly what to do with camy_test_if and camy_assert, they have kind of mixed semantics]
 ☐ Rewrite and find a cleaner way to have the shader variable names, play with macros in shaders or something along those lines, maybe declare_external_var(var_name, var_type, bind_slot) and in c++ this would simply result in using the var name to declare a static const char
 ☐ Clean the features.hpp setting  proper names, and doing it for every resource ( features.hpp )
 ☐ Rename  depth buffer => DepthStencilSomething, also add support for stencil buffer
 ☐ Check all safe releases
 ☐ Consistency when naming parammter_group parameters shared parmeters\
 ☐ Fix up vector
 ☐ Too much repeated code when failing something and returning false, possibly wrap it in a funcitopn or something else
 ☐ Find a way to have multiple entry points in same shader, way too many files otherwise


 Multithreading:
   ☐  Currently the API is not thread safe
   ☐  To make the render queue thread safe, the first step is when calling begin() make sure to pass the maximum number of items that will be queued this way the buffer will be allocated and we can use a simple atomic :), this is usually known ( the upper limit ) before queueing
   ☐ Cached constant buffers should per-thread / command list executeing